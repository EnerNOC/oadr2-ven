<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- edited with XMLSpy v2010 rel. 3 (http://www.altova.com) by James Zuber (private) -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:ei="http://docs.oasis-open.org/ns/energyinterop/201110" xmlns:pyld="http://docs.oasis-open.org/ns/energyinterop/201110/payloads" xmlns:xcal="urn:ietf:params:xml:ns:icalendar-2.0" xmlns:emix="http://docs.oasis-open.org/ns/emix/2011/06" xmlns:strm="urn:ietf:params:xml:ns:icalendar-2.0:stream" targetNamespace="http://docs.oasis-open.org/ns/energyinterop/201110" elementFormDefault="qualified" attributeFormDefault="qualified">
   <xs:import namespace="urn:ietf:params:xml:ns:icalendar-2.0" schemaLocation="oadr_xcal_20a_032212.xsd"/>
   <xs:import namespace="urn:ietf:params:xml:ns:icalendar-2.0:stream" schemaLocation="oadr_strm_20a_032212.xsd"/>
   <xs:import namespace="http://docs.oasis-open.org/ns/emix/2011/06" schemaLocation="oadr_emix_20a_032212.xsd"/>
   <xs:import namespace="http://docs.oasis-open.org/ns/energyinterop/201110/payloads" schemaLocation="oadr_pyld_20a_032212.xsd"/>
   <!--  ******* responseCode ******** -->
   <xs:element name="responseCode" type="ei:ResponseCodeType"/>
   <!--  ******* responseCodeType ******** -->
   <xs:simpleType name="ResponseCodeType">
      <xs:annotation>
         <xs:documentation>Similar to HTTP 1.1 Error Pattern, 1st digit sufficient for most error processing
      - 1xx: Informational - Request received, continuing process
      - 2xx: Success - The action was successfully received, understood, and accepted
      - 3xx: Pending - Further action must be taken in order to complete the request
      - 4xx: Requester Error - The request contains bad syntax or cannot be fulfilled
      - 5xx: Responder Error - The responder failed to fulfill an apparently valid request
      xx is used for defining more fine grained errors
	</xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:pattern value="[0-9][0-9][0-9]"/>
      </xs:restriction>
   </xs:simpleType>
   <!--  ******* responseDescription ******** -->
   <xs:element name="responseDescription" type="xs:string"/>
   <!--  ******* venID ******** -->
   <xs:element name="venID" type="xs:string"/>
   <!--  ******* vtnID ******** -->
   <xs:element name="vtnID" type="xs:string"/>
   <!--  ******* eventID ******** -->
   <xs:element name="eventID" type="xs:string"/>
   <!--  ******* modificationNumber ******** -->
   <xs:element name="modificationNumber" type="xs:unsignedInt"/>
   <!--  ******* qualifiedEventID ******** -->
   <xs:element name="qualifiedEventID" type="ei:QualifiedEventIDType"/>
   <!--  ******* QualifiedEventIDType ******** -->
   <xs:complexType name="QualifiedEventIDType">
      <xs:annotation>
         <xs:documentation>Fully Qualified Event ID includes the eventID and the Modification Number</xs:documentation>
      </xs:annotation>
      <xs:sequence>
         <xs:element ref="ei:eventID"/>
         <xs:element ref="ei:modificationNumber"/>
      </xs:sequence>
   </xs:complexType>
   <!--  ******* optType ******** -->
   <xs:element name="optType" type="ei:OptTypeType"/>
   <xs:simpleType name="OptTypeType">
      <xs:restriction base="xs:token">
         <xs:enumeration value="optIn"/>
         <xs:enumeration value="optOut"/>
      </xs:restriction>
   </xs:simpleType>
   <!--  ******* eiEvent ******** -->
   <xs:element name="eiEvent">
      <xs:complexType>
         <xs:sequence>
            <xs:element name="eventDescriptor">
               <xs:complexType>
                  <xs:sequence>
                     <xs:element ref="ei:eventID"/>
                     <xs:element ref="ei:modificationNumber"/>
                     <xs:element name="priority" type="xs:unsignedInt" minOccurs="0"/>
                     <xs:element name="eiMarketContext">
                        <xs:complexType>
                           <xs:sequence>
                              <xs:element ref="emix:marketContext"/>
                           </xs:sequence>
                        </xs:complexType>
                     </xs:element>
                     <xs:element name="createdDateTime" type="xcal:DateTimeType"/>
                     <xs:element ref="ei:eventStatus"/>
                     <xs:element name="testEvent" type="xs:string" minOccurs="0"/>
                     <xs:element name="vtnComment" type="xs:string" minOccurs="0"/>
                  </xs:sequence>
               </xs:complexType>
            </xs:element>
            <xs:element name="eiActivePeriod">
               <xs:complexType>
                  <xs:sequence>
                     <xs:element ref="xcal:properties"/>
                     <xs:element ref="xcal:components"/>
                  </xs:sequence>
               </xs:complexType>
            </xs:element>
            <xs:element name="eiEventSignals">
               <xs:complexType>
                  <xs:sequence>
                     <xs:element name="eiEventSignal" maxOccurs="unbounded">
                        <xs:complexType>
                           <xs:sequence>
                              <xs:element ref="strm:intervals"/>
                              <xs:element name="signalName" type="xs:string"/>
                              <xs:element ref="ei:signalType"/>
                              <xs:element name="signalID" type="xs:string"/>
                              <xs:element name="currentValue">
                                 <xs:complexType>
                                    <xs:sequence>
                                       <xs:element ref="ei:payloadFloat"/>
                                    </xs:sequence>
                                 </xs:complexType>
                              </xs:element>
                           </xs:sequence>
                        </xs:complexType>
                     </xs:element>
                  </xs:sequence>
               </xs:complexType>
            </xs:element>
            <xs:element name="eiTarget">
               <xs:complexType>
                  <xs:sequence>
                     <xs:element name="groupID" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
                     <xs:element name="resourceID" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
                     <xs:element ref="ei:venID" minOccurs="0" maxOccurs="unbounded"/>
                     <xs:element name="partyID" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
                  </xs:sequence>
               </xs:complexType>
            </xs:element>
         </xs:sequence>
      </xs:complexType>
   </xs:element>
   <!--  ******* eventStatus ******** -->
   <xs:element name="eventStatus" type="ei:EventStatusEnumeratedType"/>
   <!--  ******* EventStatusEnumeratedType ******** -->
   <xs:simpleType name="EventStatusEnumeratedType">
      <xs:restriction base="xs:token">
         <xs:enumeration value="none">
            <xs:annotation>
               <xs:documentation>No event pending</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="far">
            <xs:annotation>
               <xs:documentation>event pending in the far future. The exact definition of how far in the future this refers is dependent upon the market context, but typically means the next day.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="near">
            <xs:annotation>
               <xs:documentation>event pending in the near future. The exact definition of how near in the future the pending event is active is dependent on the market context</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="active">
            <xs:annotation>
               <xs:documentation>The event has been initiated and is currently active.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="completed">
            <xs:annotation>
               <xs:documentation>The event has completed.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="cancelled">
            <xs:annotation>
               <xs:documentation>The event has been canceled.</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
      </xs:restriction>
   </xs:simpleType>
   <!--  ******* x-eiNotification ******** -->
   <xs:element name="x-eiNotification" type="xcal:DurationPropType"/>
   <!--  ******* x-eiRampUp ******** -->
   <xs:element name="x-eiRampUp" type="xcal:DurationPropType"/>
   <!--  *******x-eiRecovery******** -->
   <xs:element name="x-eiRecovery" type="xcal:DurationPropType"/>
   <!--  ******* eiResponse ******** -->
   <xs:element name="eiResponse">
      <xs:complexType>
         <xs:sequence>
            <xs:element ref="ei:responseCode"/>
            <xs:element ref="ei:responseDescription" minOccurs="0"/>
            <xs:element ref="pyld:requestID"/>
         </xs:sequence>
      </xs:complexType>
   </xs:element>
   <!--  ******* eventResponses ******** -->
   <xs:element name="eventResponses">
      <xs:complexType>
         <xs:sequence>
            <xs:element name="eventResponse" minOccurs="0" maxOccurs="unbounded">
               <xs:complexType>
                  <xs:sequence>
                     <xs:element ref="ei:responseCode"/>
                     <xs:element ref="ei:responseDescription" minOccurs="0"/>
                     <xs:element ref="pyld:requestID"/>
                     <xs:element ref="ei:qualifiedEventID"/>
                     <xs:element ref="ei:optType"/>
                  </xs:sequence>
               </xs:complexType>
            </xs:element>
         </xs:sequence>
      </xs:complexType>
   </xs:element>
   <!--  ******* payloadFloat ******** -->
   <xs:element name="payloadFloat">
      <xs:complexType>
         <xs:sequence>
            <xs:element name="value" type="xs:float"/>
         </xs:sequence>
      </xs:complexType>
   </xs:element>
   <!--  ******* signalType ******** -->
   <xs:element name="signalType" type="ei:SignalTypeEnumeratedType"/>
   <!--  ******* SignalTypeEnumeratedType ******** -->
   <xs:simpleType name="SignalTypeEnumeratedType">
      <xs:annotation>
         <xs:documentation>SignalTypeEnumerated lists the pre-defined Types used to specify the Payload Types and conformance in a Stream</xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:token">
         <xs:enumeration value="delta">
            <xs:annotation>
               <xs:documentation>Signal indicates the amount to change (denominated in Itembase or in the EMIX Product) from what one would have used without the Signal. This may or may not be accompanied by a baseline. Payload Type Quantity</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="level">
            <xs:annotation>
               <xs:documentation>Signal indicates a Program Level. Payload Type is Program Level</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="multiplier">
            <xs:annotation>
               <xs:documentation>Signal indicates a multiplier applied to the current rate of  delivery or usage (denominated in Itembase or in the EMIX Product) from what one would have used without the Signal. This may or may not be accompanied by a baseline. Payload Type is Float</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="price">
            <xs:annotation>
               <xs:documentation>Signal indicates the Price. Extended Price is the value multiplied by the number of units units (denominated in Itembase or in the EMIX Product). Payload Type is emix:price</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="priceMultiplier">
            <xs:annotation>
               <xs:documentation>Signal indicates the Price Multiplier. Extended Price is the computed price (as described in EMIX) the value multiplied by the number of units units (denominated in Itembase or in the EMIX Product). Payload Type is emix:priceMultiplier</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="priceRelative">
            <xs:annotation>
               <xs:documentation>Signal indicates the Relative Price. Extended Price is the computed price (as described in EMIX) the value multiplied by the number of units units (denominated in Itembase or in the EMIX Product). Payload Type is emix:priceRelative</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="product">
            <xs:annotation>
               <xs:documentation>Signal indicates the Product for each interval. Payload Type is an EMIX Product Description</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="setpoint">
            <xs:annotation>
               <xs:documentation>Signal indicates a target amount of units (denominated in Itembase or in the EMIX Product). Payload Type is Quantity</xs:documentation>
            </xs:annotation>
         </xs:enumeration>
      </xs:restriction>
   </xs:simpleType>
   <!--  ******* interval ******** -->
   <xs:element name="interval">
      <xs:complexType>
         <xs:sequence>
            <xs:element ref="xcal:duration"/>
            <xs:element ref="xcal:uid"/>
            <xs:element name="signalPayload">
               <xs:annotation>
                  <xs:documentation>ei: lmited to 0=normal; 1=moderate; 2=high; 3=special for SIMPLE</xs:documentation>
               </xs:annotation>
               <xs:complexType>
                  <xs:sequence>
                     <xs:element ref="ei:payloadFloat"/>
                  </xs:sequence>
               </xs:complexType>
            </xs:element>
         </xs:sequence>
      </xs:complexType>
   </xs:element>
</xs:schema>
